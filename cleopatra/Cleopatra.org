#+BEGIN_SRC makefile :tangle cleopatra.mk
cleopatra-prebuild :
	@echo "  export  cleopatra"
	@cleopatra sh -- cleopatra-run-elisp gen.el

CONFIGURE += .emacs.d/
ARTIFACTS += code/ book/ .cache/

cleopatra-build :
	@echo "   cargo  build"
	@cd code/; cargo build 2>> ${ROOT}/build.log
	@cd code/; cargo doc 2>> ${ROOT}/build.log
	@echo " install  cleopatra files"
	@cp code/cleopatra.el .cleopatra/emacs.d
	@cp code/bin/* .cleopatra/bin

serve :
	cd book/ ; python -m http.server
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle .cleopatra/emacs.d/gen.el :noweb yes
<<setup>>

<<publish>>

(provide 'gen)
#+END_SRC

* Setup

#+BEGIN_SRC emacs-lisp :noweb-ref setup
(use-package rust-mode :ensure t :defer t)

(cleopatra:configure)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)))

(defun cleopatra-html-src-block (oldfun src-block contents info)
  (let*
      ((old-ret (funcall oldfun src-block contents info))
       (pars (org-babel-parse-header-arguments
              (org-element-property :parameters src-block)))
       (tangle (cdr (assoc :tangle pars)))
       (name (cdr (assoc :name pars))))
    (cond
     (name
      (concat
       "<div class=\"org-literate-programming\">"
       (format "<div class=\"org-src-name\">&lt;&lt%s&gt;&gt :=</div>" name)
       old-ret
       "</div>"))
     ((not (string= tangle "no"))
      (concat
       "<div class=\"org-literate-programming\">"
       old-ret
       (format "<div class=\"org-src-tangled-to\">%s</div>" tangle)
       "</div>"))
     (t old-ret))))

(advice-add 'org-html-src-block
            :around #'cleopatra-html-src-block)

(setq org-babel-exp-code-template
      (concat "#+BEGIN_SRC %lang%switches%flags "
              ":tangle %tangle :name %name\n"
              "%body\n"
              "#+END_SRC"))
#+END_SRC

* Publishing Projects

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref publish
(org-babel-lob-ingest "src/commons.org")

(setq org-publish-project-alist
      '(("og-html"
         <<html-properties>>)
        ("og-tangle"
         <<tangle-properties>>)))

(org-publish-all)
#+END_SRC

** HTML

#+NAME: html-properties#input
#+BEGIN_SRC emacs-lisp :noweb-ref html-properties
:base-directory "src"
#+END_SRC

#+NAME: html-properties#output
#+BEGIN_SRC emacs-lisp :noweb-ref html-properties
:publishing-directory "book"
#+END_SRC

#+NAME: html-properties#rec
#+BEGIN_SRC emacs-lisp :noweb-ref html-properties
:recursive t
#+END_SRC

#+NAME: html-properties#output-format
#+BEGIN_SRC emacs-lisp :noweb-ref html-properties
:publishing-function org-html-publish-to-html
#+END_SRC

#+NAME: html-properties#output-format
#+BEGIN_SRC emacs-lisp :noweb-ref html-properties
:auto-preamble t
#+END_SRC

#+NAME: html-properties#html
#+BEGIN_SRC emacs-lisp :noweb-ref html-properties :noweb no-export
:html-link-home "/index.html"
:html-head "<style>
  <<style>>
</style>"
#+END_SRC

#+NAME: style
#+BEGIN_SRC css
.org-src-name {
  font-weight : bold;
  font-family : monospace;
  font-size : smaller;
  margin-bottom : -1em;
}

.org-src-tangled-to::before {
  content : \"> \";
}

.org-src-tangled-to {
  font-weight : bold;
  font-family : monospace;
  font-size : smaller;
  margin-top : -1em;
  text-align : right;
}

#org-div-home-and-up {
  z-index : 1000;
  position : sticky;
  top : 0;
  background : white;
}
#+END_SRC

** Tangled Files

#+NAME: tangle-properties#input
#+BEGIN_SRC emacs-lisp :noweb-ref tangle-properties
:base-directory "src"
:exclude "commons.org"
#+END_SRC

#+NAME: tangle-properties#output
#+BEGIN_SRC emacs-lisp :noweb-ref tangle-properties
:publishing-directory "code"
#+END_SRC

#+NAME: tangle-properties#rec
#+BEGIN_SRC emacs-lisp :noweb-ref tangle-properties
:recursive t
#+END_SRC

#+NAME: tangle-properties#output-format
#+BEGIN_SRC emacs-lisp :noweb-ref tangle-properties
:publishing-function cleopatra:tangle-publish
#+END_SRC
