#+TITLE: Cleopatra’s Library of Babel
#+AUTHOR: Thomas Letan
#+HTML_LINK_UP: index.html

#+NAME: top-tail-fun
#+BEGIN_SRC emacs-lisp
(defun top-tail (str)
  (let ((len (length str)))
    (substring str 1 (- len 1))))
#+END_SRC

* Miscellaneous

#+NAME: cleopatra-version
#+BEGIN_SRC emacs-lisp
"1.0.0-dev"
#+END_SRC

* Rust

** Generating a Crate’s List of Dependencies

#+NAME: deps-test
| ~nom~  | ~"5"~ | Parsing something with style        |
| ~clap~ | ~"*"~ | Dealing with command-line arguments |

generates the following TOML entry.

#+BEGIN_SRC toml :noweb yes
<<gen-cargo-deps()>>
#+END_SRC

#+NAME: gen-cargo-deps
#+BEGIN_SRC emacs-lisp :var deps=deps-test :noweb yes
<<top-tail-fun>>

(format
 "[dependencies]\n%s"
 (mapconcat (lambda (dep)
              (format "%s = %s"
                      (top-tail (nth 0 dep))
                      (top-tail (nth 1 dep))))
            deps
            "\n"))
#+END_SRC

** Generating a Rust Structure

#+NAME: derive-auto
- ~Serialize~
- ~Deserialize~

#+NAME: struct-test
| ~field1~ | ~isize~   | Some integer because why not | ~serde(default)~ |
| ~field2~ | ~PathBuf~ | Let’s be parametric          |                  |

generates the following Rust struct

#+BEGIN_SRC rust :noweb yes
<<gen-rust-struct()>>
#+END_SRC

#+NAME: gen-rust-struct
#+BEGIN_SRC emacs-lisp :var fields=struct-test :var type-args="" :var name="Test" :noweb yes
<<top-tail-fun>>

(format
 "pub struct %s%s {\n%s\n}"
 name
 type-args
 (mapconcat
  (lambda (field)
    (let* ((name (top-tail (nth 0 field)))
           (type (top-tail (nth 1 field)))
           (docs-maybe (nth 2 field))
           (docs (if (string= docs-maybe "") ""
                   (format "/// %s\n    " docs-maybe)))
           (attrs-maybe (nth 3 field))
           (attrs (if (string= attrs-maybe "") ""
                    (format "#[%s]\n    " (top-tail attrs-maybe)))))
      (format "    %s%spub %s : %s," docs attrs name type)))
  fields
  "\n"))
#+END_SRC

#+NAME: enum-test
| ~ConfigurationParsing~  | ~PathBuf, toml::de::Error~ | There is a parsing error inside a configuration file                                  |
| ~ConfigurationNotFound~ |                            | There is no configuration file neither in current directory nor in any of its parents |
| ~Anomaly~               | ~String~                   | Something else happened, that was not supposed to                                     |

#+NAME: gen-rust-enum
#+BEGIN_SRC emacs-lisp :var variants=enum-test :var type-args="" :var name="Test" :noweb yes
<<top-tail-fun>>

(format
 "pub enum %s%s {\n%s\n}"
 name
 type-args
 (mapconcat
  (lambda (variant)
    (let* ((name (top-tail (nth 0 variant)))
           (type-maybe (nth 1 variant))
           (type (if (string= type-maybe "") ""
                   (format "(%s)" (top-tail type-maybe))))
           (docs-maybe (nth 2 variant))
           (docs (if (string= docs-maybe "") ""
                   (format "/// %s\n    " docs-maybe))))
      (format "    %s%s%s," docs name type)))
  variants
  "\n"))
#+END_SRC

#+RESULTS: gen-rust-enum
: pub enum Test {
:     /// There is a parsing error inside a configuration file
:     ConfigurationParsing(PathBuf, toml::de::Error),
:     /// There is no configuration file neither in current directory nor in any of its parents
:     ConfigurationNotFound,
:     /// Something else happened, that was not supposed to
:     Anomaly(String),
: }
