#+TITLE: Cleopatraâ€™ Build Process
#+AUTHOR: Thomas Letan
#+HTML_LINK_UP: index.html

* ~boot.mk~

#+BEGIN_SRC makefile :tangle boot.mk
init :
	@echo "    init  cleopatra"
	@cleopatra-run-elisp "cleopatra-gen-proc.el" 2> build.log

-include ${CLEOPATRA_DIRECTORY}/deps.mk

prebuild :
build : prebuild
postbuild : build

.PHONY : init prebuild build postbuild
#+END_SRC

* ~cleopatra-gen-proc.el~

#+BEGIN_SRC emacs-lisp :tangle elisp/cleopatra-gen-proc.el :noweb yes :exports none
;;; cleopatra-gen-proc.el --- The cleopatra Emacs Library
;;; Commentary:
;;; Code:
<<cleopatra-gen-proc-el>>

(provide 'cleopatra-gen-proc)
;;; cleopatra-gen-proc.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref cleopatra-gen-proc-el
(defun cleopatra:gen-processes-tangle-publish (conf filename pub-dir)
  (let ((tangled (cleopatra:tangle-publish conf filename pub-dir))
        (proc (file-name-sans-extension (file-name-nondirectory  filename))))
    (insert
     (format "prebuild : %s-prebuild\nbuild : %s-build\npostbuild : %s-postbuild\n"
             proc proc proc))
    (insert
     (format "%s-build : %s-prebuild\n%s-postbuild : %s-build\n"
             proc proc proc proc))
    (insert
     (format ".PHONY : %s-prebuild %s-build %s-postbuild\n"
             proc proc proc proc))
    (insert
     (format "include ${CLEOPATRA_DIRECTORY}/%s.mk\n" proc))))

(cleopatra:configure)
(setq org-publish-use-timestamps-flag nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)))

(setq org-publish-project-alist
      `(("cleopatra-gen-proc"
         :base-directory ,(getenv "CLEOPATRA_GENERATION_PROCESSES")
         :publishing-directory ,(getenv "CLEOPATRA_DIRECTORY")
         :publishing-function cleopatra:gen-processes-tangle-publish)))

(with-temp-buffer
  (org-publish-all)
  (write-file (concat (getenv "CLEOPATRA_DIRECTORY") "/deps.mk")))
#+END_SRC
